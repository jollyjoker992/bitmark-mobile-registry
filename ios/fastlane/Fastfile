# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

reset_git_repo(
  force: true,
  skip_clean: true
)
git_pull
sh "npm install"

platform :ios do
  desc "Push a new beta build to Hockeyapp"
  lane :prepare_appstore do
    version_number = latest_hockey_build_number(
      api_token: ENV['HOCKEYAPP_KEY']
    ).to_i
    increment_build_number(
      xcodeproj: "./Bitmark Registry.xcodeproj",
      build_number: (version_number + 1).to_i
    )
    set_info_plist_value(
      path: "./Info.plist",
      key: "BitmarkSDKAPIKey",
      value: ENV['BITMARKSDK_API_KEY']
    )
    cert
    sigh(
      force: false,
      adhoc: true
    )
    build_app(
      export_options: {iCloudContainerEnvironment: 'Production'},
      workspace: "./Bitmark Registry.xcworkspace", 
      scheme: "Bitmark Registry",
      include_bitcode: true
    )
    sentry_upload_dsym(
      auth_token: ENV['SENTRY_AUTH_TOKEN'],
      org_slug: 'bitmark-inc',
      project_slug: 'bitmark-registry',
      dsym_path: './Bitmark Registry.app.dSYM.zip'
    )
    hockey(
      api_token: ENV['HOCKEYAPP_KEY']
    )
  end
  lane :beta do
    version_number = latest_hockey_build_number(
      api_token: ENV['HOCKEYAPP_KEY']
    ).to_i
    increment_build_number(
      xcodeproj: "./Bitmark Registry.xcodeproj",
      build_number: (version_number + 1).to_i
    )
    set_info_plist_value(
      path: "./Info-beta.plist",
      key: "BitmarkSDKAPIKey",
      value: ENV['BITMARKSDK_API_KEY']
    )
    cert
    sigh(
      force: false
    )
    build_app(
      export_options: {iCloudContainerEnvironment: 'Production'},
      workspace: "./Bitmark Registry.xcworkspace", 
      scheme: "Bitmark Registry beta",
      include_bitcode: false
    )
    sentry_upload_dsym(
      auth_token: ENV['SENTRY_AUTH_TOKEN'],
      org_slug: 'bitmark-inc',
      project_slug: 'bitmark-registry',
      dsym_path: './Bitmark Registry beta.app.dSYM.zip'
    )
    hockey(
      api_token: ENV['HOCKEYAPP_KEY']
      )
  end
  lane :alpha do
    version_number = latest_hockey_build_number(
      api_token: ENV['HOCKEYAPP_KEY']
    ).to_i
    increment_build_number(
      xcodeproj: "./Bitmark Registry.xcodeproj",
      build_number: (version_number + 1).to_i
    )
    cert
    sigh(
      force: false
    )
    build_app(
      export_options: {iCloudContainerEnvironment: 'Production'},
      workspace: "./Bitmark Registry.xcworkspace", 
      scheme: "Bitmark Registry dev",
      include_bitcode: false
    )
    sentry_upload_dsym(
      auth_token: ENV['SENTRY_AUTH_TOKEN'],
      org_slug: 'bitmark-inc',
      project_slug: 'bitmark-registry',
      dsym_path: './Bitmark Registry dev.app.dSYM.zip'
    )
    hockey(
      api_token: ENV['HOCKEYAPP_KEY'],
      notes_type: "1"
    )
  end
  lane :betatravis do
    sh "npm install"
    keychain_name = "ios-build.keychain"
    keychain_password = SecureRandom.base64

    version_number = latest_hockey_build_number(
      api_token: ENV['HOCKEYAPP_KEY']
    ).to_i
    increment_build_number(
      xcodeproj: "./Bitmark Registry.xcodeproj",
      build_number: (version_number + 1).to_i
    )
    set_info_plist_value(
      path: "./Info-beta.plist",
      key: "BitmarkSDKAPIKey",
      value: ENV['BITMARKSDK_API_KEY']
    )
    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      add_to_search_list: true
    )

    unlock_keychain(
      path: keychain_name,
      password: keychain_password
    )

    match(
      app_identifier: 'com.bitmark.registry.beta',
      git_url: 'git@github.com:bitmark-inc/mobile-shared-certificate.git',
      type: 'enterprise',
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      readonly: true
    )

    build_app(
      export_options: {iCloudContainerEnvironment: 'Production'},
      workspace: "./Bitmark Registry.xcworkspace", 
      scheme: "Bitmark Registry beta",
      silent:true,
      include_bitcode: true
    )
    sentry_upload_dsym(
      auth_token: ENV['SENTRY_AUTH_TOKEN'],
      org_slug: 'bitmark-inc',
      project_slug: 'bitmark-registry',
      dsym_path: './Bitmark Registry beta.app.dSYM.zip'
    )
    hockey(
      api_token: ENV['HOCKEYAPP_KEY'],
      release_type: "2",
      tags: "internal_testers",
    )
  end
  lane :developtravis do
    sh "npm install"
    keychain_name = "ios-build.keychain"
    keychain_password = SecureRandom.base64

    version_number = latest_hockey_build_number(
      api_token: ENV['HOCKEYAPP_KEY']
    ).to_i
    increment_build_number(
      xcodeproj: "./Bitmark Registry.xcodeproj",
      build_number: (version_number + 1).to_i
    )
    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      add_to_search_list: true
    )

    unlock_keychain(
      path: keychain_name,
      password: keychain_password
    )

    match(
      app_identifier: 'com.bitmark.registry.inhouse',
      git_url: 'git@github.com:bitmark-inc/mobile-shared-certificate.git',
      type: 'enterprise',
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      readonly: true
    )

    build_app(
      export_options: {iCloudContainerEnvironment: 'Production'},
      workspace: "./Bitmark Registry.xcworkspace", 
      scheme: "Bitmark Registry dev",
      silent:true,
      include_bitcode: false
    )

    hockey(
      api_token: ENV['HOCKEYAPP_KEY'],
      notes: "*Branch*: ```" + ENV['TRAVIS_BRANCH'] + "``` --- *CI build*: ```" + ENV['TRAVIS_JOB_WEB_URL'] + "```",
      notes_type: "1",
      build_server_url: ENV['TRAVIS_JOB_WEB_URL'],
      bypass_cdn: true,
      repository_url: "https://github.com/bitmark-inc/bitmark-mobile-health-plus",
    )
    
    sentry_upload_dsym(
      auth_token: ENV['SENTRY_AUTH_TOKEN'],
      org_slug: 'bitmark-inc',
      project_slug: 'bitmark-registry',
      dsym_path: './Bitmark Registry dev.app.dSYM.zip'
    )
  end
end