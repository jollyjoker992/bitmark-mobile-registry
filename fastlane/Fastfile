# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Push a new beta build to Hockeyapp"
  lane :prepare_appstore do
    git_pull
    sh "rm -rf node_modules/ && rm -rf ios/build/ && npm cache clean --force && npm install"
    version_number = latest_hockey_build_number(
      api_token: ENV['HOCKEYAPP_KEY']
    ).to_i
    increment_build_number(
      xcodeproj: "./Bitmark Registry.xcodeproj",
      build_number: (version_number + 1).to_i
    )
    set_info_plist_value(
      path: "./Info.plist",
      key: "BitmarkSDKAPIKey",
      value: ENV['BITMARKSDK_API_KEY']
    )
    cert
    sigh(
      force: false,
      adhoc: true
    )
    build_app(
      export_options: {iCloudContainerEnvironment: 'Production'},
      workspace: "./Bitmark Registry.xcworkspace", 
      scheme: "Bitmark Registry",
      include_bitcode: true,
      clean: true
    )
    sentry_upload_dsym(
      auth_token: ENV['SENTRY_AUTH_TOKEN'],
      org_slug: 'bitmark-inc',
      project_slug: 'bitmark-registry',
      dsym_path: './Bitmark.app.dSYM.zip'
    )
    hockey(
      api_token: ENV['HOCKEYAPP_KEY']
    )
    reset_git_repo(
      force: true,
      skip_clean: true
    )
  end
  lane :beta do
    git_pull
    sh "rm -rf node_modules/ && rm -rf ios/build/ && npm cache clean --force && npm install"
    version_number = latest_hockey_build_number(
      api_token: ENV['HOCKEYAPP_KEY']
    ).to_i
    increment_build_number(
      xcodeproj: "./Bitmark Registry.xcodeproj",
      build_number: (version_number + 1).to_i
    )
    set_info_plist_value(
      path: "./Info-beta.plist",
      key: "BitmarkSDKAPIKey",
      value: ENV['BITMARKSDK_API_KEY']
    )
    cert
    sigh(
      force: false
    )
    build_app(
      export_options: {iCloudContainerEnvironment: 'Production'},
      workspace: "./Bitmark Registry.xcworkspace", 
      scheme: "Bitmark Registry beta",
      include_bitcode: false,
      clean: true
    )
    sentry_upload_dsym(
      auth_token: ENV['SENTRY_AUTH_TOKEN'],
      org_slug: 'bitmark-inc',
      project_slug: 'bitmark-registry',
      dsym_path: './Bitmark Registry beta.app.dSYM.zip'
    )
    hockey(
      api_token: ENV['HOCKEYAPP_KEY'],
      release_type: "2"
    )
    reset_git_repo(
      force: true,
      skip_clean: true
    )
  end
  lane :alpha do
    git_pull
    sh "rm -rf node_modules/ && rm -rf ios/build/ && npm cache clean --force && npm install"
    version_number = latest_hockey_build_number(
      api_token: ENV['HOCKEYAPP_KEY']
    ).to_i
    increment_build_number(
      xcodeproj: "./Bitmark Registry.xcodeproj",
      build_number: (version_number + 1).to_i
    )
    cert
    sigh(
      force: false
    )
    build_app(
      export_options: {iCloudContainerEnvironment: 'Production'},
      workspace: "./Bitmark Registry.xcworkspace", 
      scheme: "Bitmark Registry dev",
      include_bitcode: false,
      clean: true
    )
    sentry_upload_dsym(
      auth_token: ENV['SENTRY_AUTH_TOKEN'],
      org_slug: 'bitmark-inc',
      project_slug: 'bitmark-registry',
      dsym_path: './Bitmark Registry dev.app.dSYM.zip'
    )
    hockey(
      api_token: ENV['HOCKEYAPP_KEY'],
      notes_type: "1"
    )
    reset_git_repo(
      force: true,
      skip_clean: true
    )
  end
  lane :betatravis do
    sh "npm install"
    keychain_name = "ios-build.keychain"
    keychain_password = SecureRandom.base64

    version_number = latest_hockey_build_number(
      api_token: ENV['HOCKEYAPP_KEY']
    ).to_i
    increment_build_number(
      xcodeproj: "./Bitmark Registry.xcodeproj",
      build_number: (version_number + 1).to_i
    )
    set_info_plist_value(
      path: "./Info-beta.plist",
      key: "BitmarkSDKAPIKey",
      value: ENV['BITMARKSDK_API_KEY']
    )
    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      add_to_search_list: true
    )

    unlock_keychain(
      path: keychain_name,
      password: keychain_password
    )

    match(
      app_identifier: 'com.bitmark.registry.beta',
      git_url: 'git@github.com:bitmark-inc/mobile-shared-certificate.git',
      type: 'enterprise',
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      readonly: true
    )

    build_app(
      export_options: {iCloudContainerEnvironment: 'Production'},
      workspace: "./Bitmark Registry.xcworkspace", 
      scheme: "Bitmark Registry beta",
      silent:true,
      include_bitcode: true
    )
    sentry_upload_dsym(
      auth_token: ENV['SENTRY_AUTH_TOKEN'],
      org_slug: 'bitmark-inc',
      project_slug: 'bitmark-registry',
      dsym_path: './Bitmark Registry beta.app.dSYM.zip'
    )
    hockey(
      api_token: ENV['HOCKEYAPP_KEY'],
      release_type: "2",
      tags: "internal_testers",
    )
  end
  lane :developtravis do
    sh "npm install"
    keychain_name = "ios-build.keychain"
    keychain_password = SecureRandom.base64

    version_number = latest_hockey_build_number(
      api_token: ENV['HOCKEYAPP_KEY']
    ).to_i
    increment_build_number(
      xcodeproj: "./Bitmark Registry.xcodeproj",
      build_number: (version_number + 1).to_i
    )
    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      add_to_search_list: true
    )

    unlock_keychain(
      path: keychain_name,
      password: keychain_password
    )

    match(
      app_identifier: 'com.bitmark.registry.inhouse',
      git_url: 'git@github.com:bitmark-inc/mobile-shared-certificate.git',
      type: 'enterprise',
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      readonly: true
    )

    build_app(
      export_options: {iCloudContainerEnvironment: 'Production'},
      workspace: "./Bitmark Registry.xcworkspace", 
      scheme: "Bitmark Registry dev",
      silent:true,
      include_bitcode: false
    )

    hockey(
      api_token: ENV['HOCKEYAPP_KEY'],
      notes: "*Branch*: ```" + ENV['TRAVIS_BRANCH'] + "``` --- *CI build*: ```" + ENV['TRAVIS_JOB_WEB_URL'] + "```",
      notes_type: "1",
      build_server_url: ENV['TRAVIS_JOB_WEB_URL'],
      bypass_cdn: true,
      repository_url: "https://github.com/bitmark-inc/bitmark-mobile-health-plus",
    )
    
    sentry_upload_dsym(
      auth_token: ENV['SENTRY_AUTH_TOKEN'],
      org_slug: 'bitmark-inc',
      project_slug: 'bitmark-registry',
      dsym_path: './Bitmark Registry dev.app.dSYM.zip'
    )
  end
  lane :betajenkins do
    sh "npm install"
    keychain_name = "ios-build.keychain"
    keychain_password = SecureRandom.base64

    version_number = latest_hockey_build_number(
      api_token: ENV['HOCKEYAPP_KEY']
    ).to_i
    increment_build_number(
      xcodeproj: "ios/Bitmark Registry.xcodeproj",
      build_number: (version_number + 1).to_i
    )
    set_info_plist_value(
      path: "ios/Info-beta.plist",
      key: "BitmarkSDKAPIKey",
      value: ENV['BITMARKSDK_API_KEY']
    )
    
    cert
    sigh(
      force: false
    )

    build_app(
      export_options: {iCloudContainerEnvironment: 'Production'},
      export_method: "enterprise",
      clean: "true",
      workspace: "ios/Bitmark Registry.xcworkspace", 
      scheme: "Bitmark Registry beta",
      silent:true,
      include_bitcode: true
    )
    sentry_upload_dsym(
      auth_token: ENV['SENTRY_AUTH_TOKEN'],
      org_slug: 'bitmark-inc',
      project_slug: 'bitmark-registry',
      dsym_path: './Bitmark Registry beta.app.dSYM.zip'
    )
    hockey(
      api_token: ENV['HOCKEYAPP_KEY'],
      release_type: "2",
      tags: "internal_testers",
    )
  end
  lane :developjenkins do
    version_number = latest_hockey_build_number(
      api_token: ENV['HOCKEYAPP_KEY']
    ).to_i
    increment_build_number(
      xcodeproj: "ios/Bitmark Registry.xcodeproj",
      build_number: (version_number + 1).to_i
    )
    
    cert
    sigh(
      force: false
    )

    build_app(
      export_options: {iCloudContainerEnvironment: 'Production'},
      export_method: "enterprise",
      clean: "true",
      workspace: "ios/Bitmark Registry.xcworkspace", 
      scheme: "Bitmark Registry dev",
      silent:true,
      include_bitcode: false
    )

    hockey(
      api_token: ENV['HOCKEYAPP_KEY'],
      notes_type: "1",
      repository_url: "https://github.com/bitmark-inc/bitmark-mobile-registry",
    )
    
    sentry_upload_dsym(
      auth_token: ENV['SENTRY_AUTH_TOKEN'],
      org_slug: 'bitmark-inc',
      project_slug: 'bitmark-registry',
      dsym_path: './Bitmark Registry dev.app.dSYM.zip'
    )
  end
  lane :automation_ui_development do
    build_app(
      export_options: {iCloudContainerEnvironment: 'Production'},
      export_method: "development",
      configuration: "Debug",
      clean: "true",
      workspace: "ios/Bitmark Registry.xcworkspace", 
      scheme: "Bitmark Registry dev",
      include_bitcode: false,
      derived_data_path: "./ios/derived_data"
    )
    sh "npm run test"
  end
end


platform :android do

  desc "Build inhouse version"
  lane :inhouse do |options|

    isFromLocal = options[:local]
    isDistribute = options[:distribute]
    releaseNotePath = options[:release_note_path]

    # Before build
    sh 'npm run clean'

    Dir.chdir("../android") do 

      if !isFromLocal
        createKeyProperties()
        createFabricProperties()
        createKeyStoreProperties()  
      end  

      # Fill secret key
      sh './gradlew fillSecretKey'    

      # Build signed APK
      sh './gradlew clean increaseVersionCode assembleInhouseRelease'

      # Distribute to fabric
      if isDistribute
        sh './gradlew crashlyticsUploadDistributionInhouseRelease'
      end
    end

    # reset_git_repo(
    #   force: true,
    #   skip_clean: true
    # )

  end

  desc "Build production version"
  lane :production do |options|

    isFromLocal = options[:local]
    isDistribute = options[:distribute]
    releaseNotePath = options[:release_note_path]

    # Before build
    sh 'npm run clean'

    Dir.chdir("../android") do 

      if !isFromLocal
        createKeyProperties()
        createFabricProperties()
        createKeyStoreProperties()  
      end  

      # Fill secret key
      sh './gradlew fillSecretKey'    

      # Build signed APK
      sh './gradlew clean assemblePrdRelease'

      # Distribute to fabric
      if isDistribute
        sh './gradlew crashlyticsUploadDistributionPrdRelease'
      end
    end

    # reset_git_repo(
    #   force: true,
    #   skip_clean: true
    # )
  end

  def createKeyStoreProperties()
  
    File.open('keystores/debug.properties', "w") do |f| 
      ["key.alias=%s" % [ENV['DEBUG_KEYSTORE_ALIAS']],"key.store.password=%s" % [ENV['DEBUG_ALIAS_PASSWORD']],"key.alias.password=%s" % [ENV['DEBUG_KEYSTORE_PASSWORD']]].each do |content|
          f.write(content)
          f.puts @string 
      end
    end

    File.open('keystores/release.properties', "w") do |f| 
      ["key.alias=%s" % [ENV['RELEASE_KEYSTORE_ALIAS']],"key.store.password=%s" % [ENV['RELEASE_ALIAS_PASSWORD']],"key.alias.password=%s" % [ENV['RELEASE_KEYSTORE_PASSWORD']]].each do |content|
          f.write(content)
          f.puts @string 
      end
    end
  end

  def createFabricProperties()
  
    File.open('app/fabric.properties', "w") do |f| 
      ["apiSecret=%s" % [ENV['CRASHLYTICS_BUILD_SECRET']],"apiKey=%s" % [ENV['CRASHLYTICS_API_TOKEN']]].each do |content|
          f.write(content)
          f.puts @string 
      end
    end
  end

  def createKeyProperties()
  
    File.open('key.properties', "w") do |f| 
      ["api.key.bitmark=%s" % [ENV['BITMARKSDK_API_KEY']],"api.key.intercom=%s" % [ENV['INTERCOM_API_KEY']],"api.key.codepush=%s" % [ENV['CODE_PUSH_API_KEY']]].each do |content|
          f.write(content)
          f.puts @string 
      end
    end
  end

end
