# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

reset_git_repo(
  force: true,
  skip_clean: true
)

platform :android do

  desc "Build alpha version"
  lane :alpha do |options|

     # Fill key
    fillKey()

    #Create keystore properties file
    createKeyStoreProperties()

    # Bundle js react native 
    bundleJs()

    # Build signed APK
    gradle(task: "clean assembleAlphaDebug", 
          properties: {
            'android.useDeprecatedNdk' => true,
          })

    # Distribute
    if options[:DISTRIBUTE]
      uploadCrashlytic(options[:RELEASE_NOTE_PATH], './app/build/outputs/apk/alpha/debug/app-alpha-debug.apk')
    end

  end

  desc "Build beta version"
  lane :beta do |options|

    # Fill key
    fillKey()

    # Create keystore properties file
    createKeyStoreProperties()

    # Bundle js react native 
    bundleJs()

    # Build signed APK
    gradle(task: "clean assembleBetaRelease", 
          properties: {
            'android.useDeprecatedNdk' => true,
          })

    # Distribute
    uploadCrashlytic(options[:RELEASE_NOTE_PATH], './app/build/outputs/apk/beta/release/app-beta-release.apk')

  end

  desc "Deploy a new version to the Google Play"
  lane :production do

     # Fill key
    fillKey()

    # Create keystore properties file
    createKeyStoreProperties()

    # Bundle js react native 
   bundleJs()

    gradle(task: "clean assemblePrdRelease", 
          properties: {
            'android.useDeprecatedNdk' => true,
          })
    #upload_to_play_store
  end

  def createKeyStoreProperties()
  
    File.open('../keystores/debug-keystore.properties', "w") do |f| 
      ["key.alias=%s" % [ENV['DEBUG_KEYSTORE_ALIAS']],"key.store.password=%s" % [ENV['DEBUG_ALIAS_PASSWORD']],"key.alias.password=%s" % [ENV['DEBUG_KEYSTORE_PASSWORD']]].each do |content|
          f.write(content)
          f.puts @string 
      end
    end

    File.open('../keystores/release-keystore.properties', "w") do |f| 
      ["key.alias=%s" % [ENV['RELEASE_KEYSTORE_ALIAS']],"key.store.password=%s" % [ENV['RELEASE_ALIAS_PASSWORD']],"key.alias.password=%s" % [ENV['RELEASE_KEYSTORE_PASSWORD']]].each do |content|
          f.write(content)
          f.puts @string 
      end
    end
  end


  def fillKey()
    api_key_file = '../app/src/main/jni/api-key.cpp'
    content = File.read(api_key_file)
    bitmark_api_key = content.sub! "bitmark-api-key-to-be-filled", ENV['BITMARKSDK_API_KEY']
    code_push_api_key = content.sub! "code-push-api-key-to-be-filled", ENV['CODE_PUSH_API_KEY']
    File.open(api_key_file, "w") {|file| file.puts bitmark_api_key }
    File.open(api_key_file, "w") {|file| file.puts code_push_api_key }
  end

  def bundleJs()
    Dir.chdir("../../") do 
      sh 'mkdir -p android/app/src/main/assets'
      sh 'react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res'
    end
  end

  def uploadCrashlytic(release_note_path, apk_path)
    crashlytics(
      api_token: ENV['CRASHLYTICS_API_TOKEN'],
      build_secret: ENV['CRASHLYTICS_BUILD_SECRET'],
      emails: ENV['CRASHLYTICS_TESTER_EMAIL'],
      notes_path: release_note_path,
      debug: false,
      notifications: true,
      apk_path: apk_path
    )
  end

end
